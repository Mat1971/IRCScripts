//Github Location and usage info:
//https://github.com/Mat1971/IRCScripts/tree/main/Handover

var version : float = 1.1;


//  Limitations
//  SAM scripting is terrible
//  If you stop the script, restarting it will go wrong
//       (needs SAM rebooting basically, or the script recompiling)
//       This is a limitation of SAM in 4.2.2, may work better in other versions
//  If you stop the deck while the script is running, it will go wrong
//
//  Tested on SAM 4.2.2 only!

procedure SendMessage(time: integer; message: string); forward;
procedure SetTimeMessage(time: integer; message: string); forward;
var player : TPLAYER = ActivePlayer;

//replace outer IF with a fake while?

PAL.LockExecution;
WriteLn('Countdown script starting');
if (player = nil) then WriteLn('No active player!');
var nextTime : integer = 999;
var nextMessage : string = '';
var TTG : Integer = Round( (player.Duration - player.CurTime) / 1000 );
var mins : float = Int(TTG/60);
var secs : float = TTG - 60 * mins;
var msg : string = 'Handover in ' + FloatToStr(mins) + ':';
if (secs < 10) then msg := msg + '0';
msg := msg + FloatToStr(secs);
msg := msg + ' (using Handover.PAL ' + FloatToStr(version) + ')';
writeln(msg);
SendMessage(TTG,msg);               //Sends "Handover in 5:03"
PAL.UnlockExecution;

var done : Boolean = False;
while not done do
begin
//Get next timestamp to read out
PAL.LockExecution;
  var TTG : Integer = Round( (player.Duration - player.CurTime) / 1000 );            //Seems to be a float
  if (TTG > 15) then SetTimeMessage( 15, '15 seconds left, probably less, DJ!' );    //Write to nextTime and nextMessage
  if (TTG > 30) then SetTimeMessage( 30, '30 seconds to go, DJ' );
  if (TTG > 60) then SetTimeMessage( 60, '1 minute to go' );
  if (TTG > 120) then SetTimeMessage( 120, '2:00 to go' );
  if (TTG > 180) then SetTimeMessage( 180, '3:00 to go' );
PAL.UnlockExecution;
//Wait for it to happen
  while (( player.Duration - player.CurTime ) > (nextTime+2) * 1000) do begin end;
  
  //Ideally at this point we need to check the time and the player are still valid in case of stop/start
  
  SendMessage(nextTime, nextMessage);
  if (nextTime = 15) then done := True;       //End if that was the last one
end;

PAL.LockExecution;
  while (( player.Duration - player.CurTime ) > 2000) do begin end;             //
  SendMessage(0, 'GO GO GO! Have a great show!');

  //Stop the encoders
  var I : Integer;
  for I := 0 to Encoders.Count-1 do Encoders[I].Stop;

  //Stop the decks, in case we left it in auto mode
  DeckA.Stop;
  DeckB.Stop;
PAL.UnlockExecution;

//Procedures run at high speed (I think)
//Can't use WaitFor in procedures
procedure waitandmessage(time : integer; message : String);
begin
 //WriteLn(ActivePlayer.Duration-ActivePlayer.CurTime);
 var done : Boolean = False;
 time := time * 1000;
 While not done do
    begin
        if ( ( player.Duration - player.CurTime ) < time ) then
           begin
               WriteLn('This song will end in 15 seconds!');
               done := True;
           end;
    end;
end;

function getValue() : Boolean;
begin
  Result := False;
  if ( ( player.Duration - player.CurTime ) < 180000 ) then
  begin
    WriteLn('3:00 to go');
    Result := True;
  end;
end;

procedure SetTimeMessage(time: integer; message: string);
begin
  nextTime := time;
  nextMessage := message;
end;

procedure SendMessage(time: integer; message: string);
begin
  message := StringReplace(message,' ','+', True);
  message := StringReplace(message,':','%3A', True);
  message := StringReplace(message,'?','%3F', True);
  message := StringReplace(message,',','%2C', True);
  //Fullstop is allowed unescaped
  var url1 : string = 'http://127.0.0.1:50501/message?time=';
  var url2 : string = '&data=';
  var fullurl : string = url1 + FloatToStr(time) + url2 + message;
  writeln(fullurl);
  webtostr(fullurl);
end;

WriteLn('Countdown script ending');

